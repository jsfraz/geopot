// tslint:disable
/**
 * geopot
 * Monitoring SSH login attempts and geolocating remote hosts who failed to login and gathering used credentials.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: razj@josefraz.cz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts } from '../runtime';
import type {
    ModelsConnection,
    ModelsLatLng,
    ModelsNumberValue,
    ModelsStringsValue,
} from '../models';

/**
 * no description
 */
export class StatsApi extends BaseAPI {

    /**
     * Get all latitude and longitude pairs from the database
     * All Latitude and Longitude
     */
    getAllLatLng(): Observable<Array<ModelsLatLng>>
    getAllLatLng(opts?: OperationOpts): Observable<AjaxResponse<Array<ModelsLatLng>>>
    getAllLatLng(opts?: OperationOpts): Observable<Array<ModelsLatLng> | AjaxResponse<Array<ModelsLatLng>>> {
        return this.request<Array<ModelsLatLng>>({
            url: '/api/stats/allLatLng',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get all unique countries
     * All unique countries
     */
    getAllUniqueCountries(): Observable<ModelsStringsValue>
    getAllUniqueCountries(opts?: OperationOpts): Observable<AjaxResponse<ModelsStringsValue>>
    getAllUniqueCountries(opts?: OperationOpts): Observable<ModelsStringsValue | AjaxResponse<ModelsStringsValue>> {
        return this.request<ModelsStringsValue>({
            url: '/api/stats/allUniqueCountries',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get all unique IP addresses
     * All unique IP addresses
     */
    getAllUniqueIPAddresses(): Observable<ModelsStringsValue>
    getAllUniqueIPAddresses(opts?: OperationOpts): Observable<AjaxResponse<ModelsStringsValue>>
    getAllUniqueIPAddresses(opts?: OperationOpts): Observable<ModelsStringsValue | AjaxResponse<ModelsStringsValue>> {
        return this.request<ModelsStringsValue>({
            url: '/api/stats/allUniqueIps',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get the number of connections in the last 24 hours
     * Last 24 Hour Connections
     */
    getLast24HourConnections(): Observable<ModelsNumberValue>
    getLast24HourConnections(opts?: OperationOpts): Observable<AjaxResponse<ModelsNumberValue>>
    getLast24HourConnections(opts?: OperationOpts): Observable<ModelsNumberValue | AjaxResponse<ModelsNumberValue>> {
        return this.request<ModelsNumberValue>({
            url: '/api/stats/last24HourConnections',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get the server\'s own info
     * Self Info
     */
    getServerInfo(): Observable<ModelsConnection>
    getServerInfo(opts?: OperationOpts): Observable<AjaxResponse<ModelsConnection>>
    getServerInfo(opts?: OperationOpts): Observable<ModelsConnection | AjaxResponse<ModelsConnection>> {
        return this.request<ModelsConnection>({
            url: '/api/stats/selfInfo',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get total connection count
     * Total connection count
     */
    getTotalConnectionCount(): Observable<ModelsNumberValue>
    getTotalConnectionCount(opts?: OperationOpts): Observable<AjaxResponse<ModelsNumberValue>>
    getTotalConnectionCount(opts?: OperationOpts): Observable<ModelsNumberValue | AjaxResponse<ModelsNumberValue>> {
        return this.request<ModelsNumberValue>({
            url: '/api/stats/totalConnections',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
